direction:2017-12-8

author:yj

since:2017-12-8 15:22:32

	
	spring 的 配置应用：
		1.引入程序集：
			Spring.Core
			
		2.在配置文件<configuration>节点中配置spring
			
			<!--Spring.Net块配置-->
			  <configSections>      
				<sectionGroup name="spring">
					<section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
					<section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
				</sectionGroup>
			  </configSections>
			  
			  
			  <spring>
				<!-- springNet 对象容器配置 -->
				<context>
				  
				  <!--容器中的对象的配置所在地-->
				  <resource uri="config://spring/objects"/>

				  <!--<resource uri="file://Dals.xml"/>-->
				  <resource uri="assembly://SpringNetModel/SpringNetModel/Dals.xml"/>

				</context>
				<!--objects:容器里面的对象-->
				<objects xmlns="http://www.springframework.net">
				  <description>An  example that demonstrates simple IoC features.</description>

				  <!--name:名称标识
				  type:类的全路径,程序集名称-->
				  <object name="UserInfoDal" type="SpringNetModel.UserInfoDal,SpringNetModel"></object>
				  
				</objects>
			  </spring>
			  
			  常用：
			  <!--Spring.Net 的容器的配置节点-->
			  <spring>
				<context>
				  <resource uri="file://~/Config/dals.xml"/>
				  <resource uri="file://~/Config/services.xml"/>
				  <resource uri="file://~/Config/controllers.xml"/>
				</context>
			  </spring>
			  
			  
		3.编辑相关配置：
			<?xml version="1.0" encoding="utf-8" ?>
			<objects xmlns="http://www.springframework.net"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:schemaLocation="http://www.springframework.net
					http://www.springframework.net/xsd/spring-objects.xsd">
			  <object id="person" type="SpringNetModel.PersonInfoDal,SpringNetModel">
			  </object>
				
				...............
				
			</objects>
			
		4.使用
			//初始化容器
            IApplicationContext ctx = ContextRegistry.GetContext();

			//通过<object>节点中的id值获取相应的对象
            var info = ctx.GetObject("#objectName") as #Type;	

	2.Log4j配置：
		
		1.引入程序集：
			Log4net
			
		2.在配置文件<configuration>节点中配置log4j
		
				<!--Log4net的块配置-->
				<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
			
				  <!--Log4net配置的节点-->
				  <log4net>
					<!-- OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL -->
					<!-- Set root logger level to ERROR and its appenders -->
					<root>
					  <level value="ERROR"/>
					  <appender-ref ref="SysAppender"/>
					</root>

					<!-- Print only messages of level DEBUG or above in the packages -->
					<logger name="WebLogger">
					  <level value="DEBUG"/>
					</logger>

					<appender name="SysAppender" type="log4net.Appender.RollingFileAppender,log4net" >
					  <param name="File" value="App_Data/" />
					  <param name="AppendToFile" value="true" />
					  <param name="RollingStyle" value="Date" />
					  <param name="DatePattern" value="&quot;Logs_&quot;yyyyMMdd&quot;.txt&quot;" />
					  <param name="StaticLogFileName" value="false" />
					  <layout type="log4net.Layout.PatternLayout,log4net">
						<param name="ConversionPattern" value="%d [%t] %-5p %c - %m%n" />
						<param name="日志开始" value="&#13;&#10;----------------------header--------------------------&#13;&#10;" />
						<param name="日志结束" value="&#13;&#10;----------------------footer--------------------------&#13;&#10;" />
					  </layout>
					</appender>
					<appender name="consoleApp" type="log4net.Appender.ConsoleAppender,log4net">
					  <layout type="log4net.Layout.PatternLayout,log4net">
						<param name="ConversionPattern" value="%d [%t] %-5p %c - %m%n" />
					  </layout>
					</appender>
				  </log4net> 
			
		3.相关处理类
			Command》》》
			........
		
	Route:
		ntework》》》
		.....
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			