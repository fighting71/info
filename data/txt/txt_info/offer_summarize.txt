
place:深圳市福田区福华三路卓越世纪中心2号楼皇岗商务中心6楼

date:2017/12/22

success:10%  80% X2

my problem:
	less Experience
	
question:
	1.初级与中级的区别：
	
		从体验者或老板的角度看：
			区别则是程序的体验度的高与低，例如：反应时间的快慢，友好度的高低，项目是否存在扩展性
		从开发者角度看：
			  区别则是，写的代码是否是死代码
			  作为一个低级程序员，只会跟着需求跑，需求需要什么就弄什么，只顾到达目的，不思考过程
			  作为一个中级程序员，应该不单单跟着需求跑，应该从用户、程序员、需求出发，持有自己的见解，
			在完成任务的前提下对于程序有一定的见解与分析。
			
		
	
	2.spring解析：
		spring的表现：
			帮助我们创建实例，提高开发效率
		为什么要使用spring?
			spring的优点：
				1.降低类与类之间的耦合度
					如何降低？
						原理：IOC [控制反转],DL[依赖注入]
							什么是控制反转?
								1.由谁控制：由IOC容器即Spring进行控制
								2.为何称为反转：因为对象的依赖对象实例化并未通过对象来决定，而是由spring容器来决定。即为反转
								
							什么是依赖注入？
								依赖注入：spring容器通过配置文件或特性注解给对象的依赖对象进行实例化
					
				2.提高了组件的复用信息

	3.项目中除了增删改查还有什么？
		程序的本身在某种情况下就是多种增删改查的操作。
			那你的增删改查跟别人有什么不同？
				我的增删改查的特点：直说太过于模糊~
					例如：用户的增删改查
					
					1.由于增删改查可以有很多实现
					   a.定义一个操作用户的接口
						登录、注册、修改、删除(在实际情况下，并不会直接删除用户数据，而是在表中增加一个状态列来进行验证是否可用)
					2.用户增加 会牵扯到验证
						a.如果是mvc则采用实体模型进行验证 ModelState.IsValid
						b.给密码进行加密(常用MD5加密)
						c.如果存在用户头像，初次设置为初始图片
						d.为以后可方便大数据维护，记录创建时间
						e.
					
					3.用户增加
	
	4.MVC有什么优势？
		简单来说：便于维护
		为什么便于维护？
			使用MVC后，层与层会相互分离
			html，xml,json，
			
		-----------------------------------------------------------------------------
		
	
place:深圳市福田区梅林泰科大厦西侧二楼

date:2017/12/23

success:50%

less skill:
	main --> webservice
	
	asp.net 核心：ef/webservice/xml
	
	Web 2
	
	默认最大请求长度为4M
		
		 <system.web>
		   <httpRuntime   maxRequestLength= "51200"   executionTimeout="3600"   />
		 </system.web>

		  SOAP协议 = HTTP协议 + XML数据格式
		  
	ajax请求：
 1				$("#Button2").click(function () {
 2                 //定义一个js类
 3                 //Get2方法参数名，做类的属性名称
 4                 var par = { value3: "心想事成,万事如意", year: 2012 };
 5 
 6                 //把对象序列化为json字符串
 7                 var json_str = $.toJSON(par);
 8 
 9                 var options = {
10                     url: "WS.asmx/Get2",
11                     type: "POST",
12                     contentType: "application/json; charset=utf-8",
13                     dataType: "json",
14                     //由于调用类型是基于json的,所以这里传递的参数格式必须严格遵守json字符串规定
15                     data: json_str,
16                     success: function (response) {
17                         $("#div_txt").text(response.d);
18                     }
19                 }
20 
21                 $.ajax(options)
22             })
		 
		 .net中的WebService支持三种协议HTTPGET, HTTPPOST 和 SOAP。
			默认的SOAP是支持的，当你使用这样的格式时：
			domain/webservice.asmx/methodname [Get/Post] 做的则是GET OR POST。
		 
		 SOA ，即Service Oriented Architecture ，中文一般理解为面向服务的架构

		 SOAP 即 Simple Object AccessProtocol 也就是简单对象访问协议。

		------------------------------------WebServices的优缺点-------------------------------------------
		 
		 总结一下 WebServices的优点

		其实呢，前面介绍的都是关于 WebServices 的优点，在这里就只是浅要的总结一下了。

		首先，WebServices 是基于 Internet 和异构平台的应用，

		这样便可以方便的实现通过网络来通信，同时可以实现在不同的平台之间共享数据。

		然后就是，WebServices 是基于 XML 和HTTP 的，

		也就是基于标准和开放的，基于 XML 的话，扩展性自然好，自然跨语言。

		基于 HTTP 的话，自然跨平台了。

		最后，再回忆一下 WebServices 是一种应用程序组件吧，这样便可以将 WebServices 重复使用了。

			  谈谈 WebServices 的缺点

		首先就是由于 XML 文件的难以解析，所以在使用 Web 服务的时候，会消耗较多的 CPU 和内存资源，

		而后，SOAP 是基于XML 的，所以在网络传输中传输的是 XML 文件，

		但是由 XML 文件相比于二进制文件来说，要大很多，自然就会消耗更多的网络资源了。

		而后，由于通过 WSDL 解耦了Web 服务提供者和请求者，且 SOAP 消息时从发送者向接收者单向传送的，

		这在一定程度上造成了 WebServices 是一种无状态服务，

		尽管现在在 . Net 中可以通过 Session 来实现在客户端和服务端共享一些数据，

		但是单单依靠 Session 来实现客户端和服务端的状态交互也太牵强了吧

		WebServices 在数据绑定上也存在一些缺陷，

		因为所有的数据在传输中都是使用的 XML 来实现的，

		因此，需要在二进制数据和 XML 之间进行一个转换（通过序列化和反序列化来实现），

		而在转换过程中有可能出现语义丢失的情况。

		最后就是 WebServices 的技术要求相对比较高，

		因为涉及到底层的 HTTP 协议以及SOAP ，WSDL 和UDDL 这三大平台元素，
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 