author:yj

since:2018-1-29

direction:C# skill

>>>>>>>>>>>>>显隐转换
	public static implicit 目标类型(被转化类型 变量参数)
	{
	   return 目标类型结果;
	}

	public static explicit 目标类型(被转化类型 变量参数)
	{
	   return 目标类型结果;
	}
	
>>>>>>>>>>>>>重载操作符  
	public static 返回类型 operator 操作符(参数列表)
	{
		...
	}
	
>>>>>>>>>>>>>为泛型增加约束
	 public class BaseService<T>
        where T:SalaryModel,new()//自定义类型约束
        where T:struct //泛型为结构类型
		where T:class //泛型为引用类型
	
>>>>>>>>>>>>>资源类型：
	概述：在C#中的每一个类型都代表一种资源，而资源又分为两类：
		托管资源	由CLR管理分配和释放的资源，即从CLR里new出来的对象。
		非托管资源	不受CLR管理的对象，如Windows内核对象，或者文件、数据库连接、套接字、COM对象等。
		
>>>>>>>>>>>>>资源回收的条件：
	1.系统具有低的物理内存
	2.由托管堆上已分配的对象使用的内存超出了可接受的范围。
	3.调用GC.Collect方法。几乎在所有情况下，我们都不必调用此方法，因为垃圾
	  回收器会负责调用它。
	  
>>>>>>>>>>>>>自定义异常建议：
	1.方便调试。通过抛出一个自定义的异常类型实例，我们可以使捕获代码精确地知道所发生的事情，并已合适的方式进行恢复
	2.逻辑包装。自定义异常可包装多个其他异常，然后抛出一个业务异常。
	3.方便调用者编码。在编写自己的类库或者业务层代码的时候，自定义异常可以让调用方更方便处理业务异常逻辑。
	4.引入新异常类。这使程序员能够根据异常类在代码中采用不同的操作。
	
>>>>>>>>>>>>>定义同步对象建议：
	1.同步对象在需要同步的多个线程中是可见的同一对象
	2.在非静态方法中，静态变量不应作为同步对象。
	3.值类型对象不能作为同步对象。
	4.避免将字符串作为同步对象。
	5.降低同步对象的可见性。
	
	注：类型的静态方法应当保证线程安全，非静态方法不需实现线程安全。
	
	
typeof(CommandTools).Assembly.CreateInstance(typeof(CommandTools).FullName);

>>>>>>>>>>>>>C# 反射 通过类名创建类实例
	“反射”其实就是利用程序集的元数据信息。 反射可以有很多方法，编写程序时请先导入 System.Reflection 命名空间。

	1、假设你要反射一个 DLL 中的类，并且没有引用它（即未知的类型）： 
	Assembly assembly = Assembly.LoadFile("程序集路径，不能是相对路径"); // 加载程序集（EXE 或 DLL） 
	object obj = assembly.CreateInstance("类的完全限定名（即包括命名空间）"); // 创建类的实例 

	2、若要反射当前项目中的类（即当前项目已经引用它了）可以为：

	Assembly assembly = Assembly.GetExecutingAssembly(); // 获取当前程序集 
	object obj = assembly.CreateInstance("类的完全限定名（即包括命名空间）"); // 创建类的实例，返回为 object 类型，需要强制类型转换

	3、也可以为：

	Type type = Type.GetType("类的完全限定名"); 
	object obj = type.Assembly.CreateInstance(type); 

	======================================================= 
	补充：
	1）反射创建某个类的实例时，必须保证使用类的完全限定名（命名空间 + 类名）。Type.GetType 方法返回 null 则意味搜索元数据中的相关信息失败（反射失败），请确保反射时使用类的完全限定名。
	2）反射功能十分强大，没有什么不能实现的。若实现“跨程序集”，请使用第一种方法创建类的实例，并反射该实例的字段、属性、方法、事件... 然后动态调用之。
	
>>>>>>>>>>>>>C# 拼接输出
 Console.WriteLine($"\nHello,{name}, on {data:d} at {data:t}");
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
	  