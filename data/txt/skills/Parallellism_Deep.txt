author:yj

since:2018-2-1

direction:并发进阶

	
>>>>>>>>>>>>>并发和并行有什么区别？
	做并发编程之前，必须首先理解什么是并发，什么是并行，什么是并发编程，什么是并行编程。

	并发（parallellism）和并行（concurrency）是：

	解释一：并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。
	解释二：并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。
	解释三：在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群
	所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。
		
>>>>>>>>>>>>>并行处理：
	  把正在执行的大量的任务分割成小块，分配给多个同时运行的线程。
	为了让处理器的利用效率最大化，并行处理（或并行编程）采用多线程。当现代多核 CPU
	执行大量任务时，若只用一个核执行所有任务，而其他核保持空闲，这显然是不合理的。
	并行处理把任务分割成小块并分配给多个线程，让它们在不同的核上独立运行。
	并行处理是多线程的一种，而多线程是并发的一种。在现代程序中，还有一种非常重要但
	很多人还不熟悉的并发类型：异步编程。
	
>>>>>>>>>>>>>异步编程：
	  并发的一种形式，它采用 future 模式或回调（callback）机制，以避免产生不必要的
	线程。
	一个 future（或 promise）类型代表一些即将完成的操作。在 .NET 中，新版 future 类型
	有 Task 和 Task<TResult> 。在老式异步编程 API 中，采用回调或事件（event），而不是
	future。异步编程的核心理念是异步操作：启动了的操作将会在一段时间后完成。这个操作
	正在执行时，不会阻塞原来的线程。启动了这个操作的线程，可以继续执行其他任务。当
	操作完成时，会通知它的 future，或者调用回调函数，以便让程序知道操作已经结束。
	异步编程是一种功能强大的并发形式，但直至不久前，实现异步编程仍需要特别复杂的代
	码。VS2012 支持 async 和 await ，这让异步编程变得几乎和同步（非并发）编程一样容易。
	并发编程的另一种形式是响应式编程（reactive programming）。异步编程意味着程序启动一
	个操作，而该操作将会在一段时间后完成。响应式编程与异步编程非常类似，不过它是基
	于异步事件（asynchronous event）的，而不是异步操作（asynchronous operation）。异步事件
	可以没有一个实际的“开始”，可以在任何时间发生，并且可以发生多次，例如用户输入。
	
>>>>>>>>>>>>>响应式编程 
	  一种声明式的编程模式，程序在该模式中对事件做出响应。
	如果把一个程序看作一个大型的状态机，则该程序的行为便可视为它对一系列事件做出响
	应，即每换一个事件，它就更新一次自己的状态。这听起来很抽象和空洞，但实际上并非
	如此。利用现代的程序框架，响应式编程已经在实际开发中广泛使用。响应式编程不一定
	是并发的，但它与并发编程联系紧密，因此本书介绍了响应式编程的基础知识。
	通常情况下，一个并发程序要使用多种技术。大多数程序至少使用了多线程（通过线程
	池）和异步编程。要大胆地把各种并发编程形式进行混合和匹配，在程序的各个部分使用
	合适的工具。
	
>>>>>>>>>>>>>并行编程简介
	如果程序中有大量的计算任务，并且这些任务能分割成几个互相独立的任务块，那就应
该使用并行编程。并行编程可临时提高 CPU 利用率，以提高吞吐量，若客户端系统中的
CPU 经常处于空闲状态，这个方法就非常有用，但通常并不适合服务器系统。大多数服
务器本身具有并行处理能力，例如 ASP.NET 可并行地处理多个请求。某些情况下，在服
务器系统中编写并行代码仍然有用（如果你知道并发用户数量会一直是少数）。但通常情
况下，在服务器系统上进行并行编程，将降低本身的并行处理能力，并且不会有实际的
好处。
并行的形式有两种：数据并行（data parallelism）和任务并行（task parallelim）。数据并行
是指有大量的数据需要处理，并且每一块数据的处理过程基本上是彼此独立的。任务并行
是指需要执行大量任务，并且每个任务的执行过程基本上是彼此独立的。任务并行可以
是动态的，如果一个任务的执行结果会产生额外的任务，这些新增的任务也可以加入任
务池。
实现数据并行有几种不同的做法。一种做法是使用 Parallel.ForEach 方法，它类似于
foreach 循环，应尽可能使用这种做法
	
>>>>>>>>>>>>>info_node
	Parallel.ForEach 方法可以对一系列值进行并行处理。还有一个类似的解决方案，就是使
用 PLINQ（并行 LINQ）。PLINQ 的大部分功能和 Parallel 类一样，并且采用与 LINQ 类
似的语法。 Parallel 类和 PLINQ 之间有一个区别：PLINQ 假设可以使用计算机内所有的
CPU 核，而 Parallel 类则会根据 CPU 状态的变化动态地调整。
Parallel.ForEach 是并行版本的 foreach 循环。 Parallel 类也提供了并行版本的 for 循环，
即 Parallel.For 方法。如果有多个数组的数据，并且它们采用了相同的索引， Parallel.
For 就特别适用。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	